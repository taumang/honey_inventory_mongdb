// Define the HoneyItem interface
interface HoneyItem {
    id: string,
    name: string,
    color:string,
    price:string,
    size:string,
    quantity: number
  }
  
  // Function to fetch all items from the backend API
  async function fetchItems() {
    const response = await fetch('http://localhost:5217/HoneyInventory');
    const data: HoneyItem[] = await response.json();
    populateInventoryList(data);
  }
  
  // Function to get a single item by ID
  async function fetchItemById(id: string) {
    const response = await fetch(`http://localhost:5217/HoneyInventory/${id}`);
    const data: HoneyItem = await response.json();
    // Handle the data (e.g., populate a details view)
  }
  
  // Function to add a new item via the API
  async function addItemToBackend(item: HoneyItem) {
    const response = await fetch('http://localhost:5000/HoneyInventory', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(item)
    });
    // Refresh the list after adding
    fetchItems();
  }
  
  // Function to populate the inventory list based on the fetched data
  function populateInventoryList(data: HoneyItem[]) {
    const inventoryList = document.getElementById("inventory-list") as HTMLTableSectionElement;
    inventoryList.innerHTML = "";
    data.forEach(item => {
        const row = inventoryList.insertRow();
        
        const nameCell = row.insertCell(0);
        nameCell.textContent = item.name;

        const colorCell = row.insertCell(1);
        colorCell.textContent = item.color;

        const priceCell = row.insertCell(2);
        priceCell.textContent = item.price;

        const sizeCell = row.insertCell(3);
        sizeCell.textContent = item.size;

        const quantityCell = row.insertCell(4);
        quantityCell.textContent = item.quantity.toString();

        const actionCell = row.insertCell(5);
        actionCell.innerHTML = `
            <button class="bg-blue-500 text-white p-1 rounded-md">Edit</button>
            <button class="bg-red-500 text-white p-1 rounded-md">Delete</button>
        `;

        // Optionally: Add event listeners for the Edit and Delete buttons
    });
}
  
  // Event listener for the "Add" button
  document.getElementById("add-item-btn")?.addEventListener("click", () => {
    const itemName = (document.getElementById("new-item-name") as HTMLInputElement).value;
    const itemQuantity = parseInt((document.getElementById("new-item-quantity") as HTMLInputElement).value);
    const itemColor = (document.getElementById("new-item-color") as HTMLInputElement).value;
    const itemPrice = (document.getElementById("new-item-price") as HTMLInputElement).value;
    const itemSize = (document.getElementById("new-item-size") as HTMLInputElement).value;
    const newItem: HoneyItem = {
      id: '', // This should be generated by the backend
      name: itemName,
      quantity: itemQuantity,
      color: itemColor,
      price: itemPrice,
      size: itemSize
    };
    addItemToBackend(newItem);
  });
  
  // Fetch and populate items when the page loads
  fetchItems();
  